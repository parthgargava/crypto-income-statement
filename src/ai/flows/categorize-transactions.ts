// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A crypto transaction categorizer AI agent.
 *
 * - categorizeTransactions - A function that handles the transaction categorization process.
 * - CategorizeTransactionsInput - The input type for the categorizeTransactions function.
 * - CategorizeTransactionsOutput - The return type for the categorizeTransactions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const TransactionSchema = z.object({
  date: z.string().describe('The date of the transaction.'),
  description: z.string().describe('The description of the transaction.'),
  amount: z.number().describe('The amount of the transaction.'),
  currency: z.string().describe('The currency of the transaction.'),
});

const CategorizeTransactionsInputSchema = z.object({
  transactions: z.array(TransactionSchema).describe('An array of crypto transactions to categorize.'),
});
export type CategorizeTransactionsInput = z.infer<
  typeof CategorizeTransactionsInputSchema
>;

const CategorizeTransactionsOutputSchema = z.object({
  categorizedTransactions: z.array(
    z.object({
      date: z.string().describe('The date of the transaction.'),
      description: z.string().describe('The description of the transaction.'),
      amount: z.number().describe('The amount of the transaction.'),
      currency: z.string().describe('The currency of the transaction.'),
      category: z
        .string()
        .describe(
          'The category of the transaction (e.g., staking rewards, airdrop, salary, trading profit, withdrawal, transfer, payment, trading loss).'
        ),
      type: z.enum(['inflow', 'outflow']).describe('The type of transaction.'),
    })
  ),
});
export type CategorizeTransactionsOutput = z.infer<
  typeof CategorizeTransactionsOutputSchema
>;

export async function categorizeTransactions(
  input: CategorizeTransactionsInput
): Promise<CategorizeTransactionsOutput> {
  console.log('AI Input transactions count:', input.transactions.length);
  console.log('AI Input sample transaction:', input.transactions[0]);
  console.log('AI Input date range:', {
    first: input.transactions[0]?.date,
    last: input.transactions[input.transactions.length - 1]?.date
  });
  
  return categorizeTransactionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'categorizeTransactionsPrompt',
  input: {schema: CategorizeTransactionsInputSchema},
  output: {schema: CategorizeTransactionsOutputSchema},
  prompt: `You are an expert in cryptocurrency transactions and financial analysis.

  Your task is to categorize a list of cryptocurrency transactions into inflows and outflows, and assign a specific category to each transaction.

  Here are the categories you can use:
  - inflows: staking rewards, airdrop, salary, trading profit
  - outflows: withdrawal, transfer, payment, trading loss

  Categorization rules:
  1. **staking rewards**: Any staking, mining, or reward transactions (positive amounts)
  2. **airdrop**: Free token distributions and airdrops
  3. **salary**: Regular income deposits, salary payments
  4. **trading profit**: Profitable trades, selling assets for profit
  5. **withdrawal**: Moving assets out of the exchange/wallet
  6. **transfer**: Moving assets between accounts (can be positive or negative)
  7. **payment**: Payments for goods/services
  8. **trading loss**: Loss-making trades, selling assets at a loss

  For each transaction, consider:
  - The description text
  - The amount (positive = inflow, negative = outflow)
  - The transaction type (buy, sell, deposit, withdrawal, reward, etc.)
  - The currency involved

  Please categorize each transaction and return the results in the exact format specified by the schema.

  Transactions:
  {{#each transactions}}
  - Date: {{date}}, Description: {{description}}, Amount: {{amount}} {{currency}}, Type: {{type}}
  {{/each}}`,
});

const categorizeTransactionsFlow = ai.defineFlow(
  {
    name: 'categorizeTransactionsFlow',
    inputSchema: CategorizeTransactionsInputSchema,
    outputSchema: CategorizeTransactionsOutputSchema,
  },
  async input => {
    try {
      console.log('AI Flow: Processing', input.transactions.length, 'transactions');
      const {output} = await prompt(input);
      
      if (!output) {
        throw new Error('AI returned no output');
      }
      
      console.log('AI Flow: Successfully categorized transactions');
      return output;
    } catch (error) {
      console.error('AI Flow Error:', error);
      throw error;
    }
  }
);
